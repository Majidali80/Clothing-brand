{"kind":"FETCH","data":{"headers":{"access-control-allow-origin":"*","age":"399991","cache-control":"public, max-age=0, must-revalidate","content-disposition":"inline","content-encoding":"br","content-type":"application/json","date":"Sun, 19 Jan 2025 07:24:06 GMT","etag":"W/\"f5a4ad3c3d91ccf79f6225454e137dbd\"","server":"Vercel","strict-transport-security":"max-age=63072000; includeSubDomains; preload","transfer-encoding":"chunked","vary":"RSC, Next-Router-State-Tree, Next-Router-Prefetch","x-matched-path":"/api/products","x-vercel-cache":"HIT","x-vercel-id":"bom1::8fndz-1737271446059-7261f2c00f8e"},"body":"","status":200,"url":"https://template6-six.vercel.app/api/products"},"revalidate":31536000,"tags":[]}